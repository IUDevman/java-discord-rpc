plugins {
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
//    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

group 'club.minnced'
version '3.0.0-rc'

mainClassName = 'club.minnced.discord.rpc.internal.Main'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(16))
}

tasks.withType(JavaCompile).configureEach {
    doFirst {
        options.forkOptions.jvmArgs += ["--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED"]
        options.compilerArgs += ["--add-modules=jdk.incubator.foreign"]
    }
    options.release.set(16)
}
tasks.withType(JavaExec).configureEach {
    jvmArgs("-Dforeign.restricted=permit",
            "--add-modules", "jdk.incubator.foreign")
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    jvmArgs("-Dforeign.restricted=permit",
            "--add-modules", "jdk.incubator.foreign")
}

repositories {
    mavenLocal()
    google()
    mavenCentral()
    jcenter()
}

dependencies {
    api 'net.java.dev.jna:jna:4.4.0'
    implementation 'club.minnced:discord-rpc-release:v3.4.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

tasks.withType(JavaCompile) {
    options.incremental = true
    options.encoding = 'UTF-8'
}

// Publishing

task sources(type: Copy) {
    from 'src/main/java'
    into "$buildDir/sources"
}

classes.dependsOn sources

jar {
    archivesBaseName = project.name
    manifest {
        attributes 'Implementation-Version': version
        attributes 'Target-Platforms': 'win32-x86-64, win32-x86, linux-x86-64, darwin'
    }

    dependsOn sources
}

javadoc {
    failOnError = false
    options.author()
    options.encoding = 'UTF-8'
    if (JavaVersion.current().java9Compatible)
        options.addBooleanOption('html5', true) // jdk-9 docs
    options.links("https://java-native-access.github.io/jna/4.2.1/", "https://docs.oracle.com/javase/8/docs/api/")

    dependsOn sources
    source = sources.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "$buildDir/sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def getProjectProperty(String key) {
    return hasProperty(key) ? findProperty(key) : ''
}

build {
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
//    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
//    shadowJar.mustRunAfter sourcesJar
}
